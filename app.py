# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lgyscYc-6-NgGDxPCQbuepPe9ShF961d
"""

import streamlit as st
from sentence_transformers import SentenceTransformer
import chromadb
from chromadb.config import Settings
from utils.query_handler import retrieve_user_context

# Initialize ChromaDB
chroma_client = chromadb.Client(Settings(persist_directory="./database/chroma_db", chroma_db_impl="duckdb+parquet"))
collection = chroma_client.get_or_create_collection(name="candidate_data")

# Initialize sentence-transformer model
model = SentenceTransformer('./models/all-MiniLM-L6-v2')

# Streamlit UI
st.title("Candidate Information Chatbot")
st.subheader("Please provide the following details:")

# Collect user inputs
full_name = st.text_input("Full Name")
email = st.text_input("Email Address")
phone = st.text_input("Phone Number")
experience = st.number_input("Years of Experience", min_value=0, step=1)
position = st.text_input("Desired Position(s)")
location = st.text_input("Current Location")
tech_stack = st.text_area("Tech Stack (comma-separated)", placeholder="Python, Django, SQL")

if st.button("Submit"):
    # Combine data into a string for embedding
    user_info = f"{full_name}, {experience} years of experience, {tech_stack}, {location}"
    embedding = model.encode(user_info).tolist()

    # Add data to ChromaDB
    collection.add(
        documents=[user_info],
        metadatas=[{
            "full_name": full_name,
            "email": email,
            "phone": phone,
            "experience": experience,
            "position": position,
            "location": location,
            "tech_stack": tech_stack.split(", ")
        }],
        ids=[email]
    )
    st.success("Your data has been saved!")

# Query Section
st.subheader("Search Candidate Information")
query = st.text_input("Enter your query")
if st.button("Search"):
    result_document, result_metadata = retrieve_user_context(collection, model, query)
    if result_metadata:
        st.write("Retrieved User Info:")
        st.json(result_metadata)
    else:
        st.write("No matching data found.")